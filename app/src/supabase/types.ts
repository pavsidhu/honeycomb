/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/chat_participants": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.chat_participants.id"];
          chatId?: parameters["rowFilter.chat_participants.chatId"];
          userId?: parameters["rowFilter.chat_participants.userId"];
          createdAt?: parameters["rowFilter.chat_participants.createdAt"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["chat_participants"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** chat_participants */
          chat_participants?: definitions["chat_participants"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.chat_participants.id"];
          chatId?: parameters["rowFilter.chat_participants.chatId"];
          userId?: parameters["rowFilter.chat_participants.userId"];
          createdAt?: parameters["rowFilter.chat_participants.createdAt"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.chat_participants.id"];
          chatId?: parameters["rowFilter.chat_participants.chatId"];
          userId?: parameters["rowFilter.chat_participants.userId"];
          createdAt?: parameters["rowFilter.chat_participants.createdAt"];
        };
        body: {
          /** chat_participants */
          chat_participants?: definitions["chat_participants"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/chats": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.chats.id"];
          name?: parameters["rowFilter.chats.name"];
          createdAt?: parameters["rowFilter.chats.createdAt"];
          isGroup?: parameters["rowFilter.chats.isGroup"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["chats"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** chats */
          chats?: definitions["chats"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.chats.id"];
          name?: parameters["rowFilter.chats.name"];
          createdAt?: parameters["rowFilter.chats.createdAt"];
          isGroup?: parameters["rowFilter.chats.isGroup"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.chats.id"];
          name?: parameters["rowFilter.chats.name"];
          createdAt?: parameters["rowFilter.chats.createdAt"];
          isGroup?: parameters["rowFilter.chats.isGroup"];
        };
        body: {
          /** chats */
          chats?: definitions["chats"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/friends": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.friends.id"];
          created_at?: parameters["rowFilter.friends.created_at"];
          firstUser?: parameters["rowFilter.friends.firstUser"];
          secondUser?: parameters["rowFilter.friends.secondUser"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["friends"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** friends */
          friends?: definitions["friends"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.friends.id"];
          created_at?: parameters["rowFilter.friends.created_at"];
          firstUser?: parameters["rowFilter.friends.firstUser"];
          secondUser?: parameters["rowFilter.friends.secondUser"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.friends.id"];
          created_at?: parameters["rowFilter.friends.created_at"];
          firstUser?: parameters["rowFilter.friends.firstUser"];
          secondUser?: parameters["rowFilter.friends.secondUser"];
        };
        body: {
          /** friends */
          friends?: definitions["friends"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/messages": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.messages.id"];
          chatParticipantId?: parameters["rowFilter.messages.chatParticipantId"];
          content?: parameters["rowFilter.messages.content"];
          createdAt?: parameters["rowFilter.messages.createdAt"];
          chatId?: parameters["rowFilter.messages.chatId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["messages"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** messages */
          messages?: definitions["messages"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.messages.id"];
          chatParticipantId?: parameters["rowFilter.messages.chatParticipantId"];
          content?: parameters["rowFilter.messages.content"];
          createdAt?: parameters["rowFilter.messages.createdAt"];
          chatId?: parameters["rowFilter.messages.chatId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.messages.id"];
          chatParticipantId?: parameters["rowFilter.messages.chatParticipantId"];
          content?: parameters["rowFilter.messages.content"];
          createdAt?: parameters["rowFilter.messages.createdAt"];
          chatId?: parameters["rowFilter.messages.chatId"];
        };
        body: {
          /** messages */
          messages?: definitions["messages"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/users": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          firstName?: parameters["rowFilter.users.firstName"];
          lastName?: parameters["rowFilter.users.lastName"];
          dateOfBirth?: parameters["rowFilter.users.dateOfBirth"];
          createdAt?: parameters["rowFilter.users.createdAt"];
          phoneNumber?: parameters["rowFilter.users.phoneNumber"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** users */
          users?: definitions["users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          firstName?: parameters["rowFilter.users.firstName"];
          lastName?: parameters["rowFilter.users.lastName"];
          dateOfBirth?: parameters["rowFilter.users.dateOfBirth"];
          createdAt?: parameters["rowFilter.users.createdAt"];
          phoneNumber?: parameters["rowFilter.users.phoneNumber"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          firstName?: parameters["rowFilter.users.firstName"];
          lastName?: parameters["rowFilter.users.lastName"];
          dateOfBirth?: parameters["rowFilter.users.dateOfBirth"];
          createdAt?: parameters["rowFilter.users.createdAt"];
          phoneNumber?: parameters["rowFilter.users.phoneNumber"];
        };
        body: {
          /** users */
          users?: definitions["users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  chat_participants: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `chats.id`.<fk table='chats' column='id'/>
     */
    chatId: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    userId: string;
    /**
     * Format: timestamp without time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    createdAt?: string;
  };
  chats: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: character varying */
    name: string;
    /**
     * Format: timestamp without time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    createdAt: string;
    /** Format: boolean */
    isGroup: boolean;
  };
  friends: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    firstUser: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    secondUser: string;
  };
  messages: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `chat_participants.id`.<fk table='chat_participants' column='id'/>
     */
    chatParticipantId: string;
    /** Format: json */
    content: string;
    /**
     * Format: timestamp without time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    createdAt: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `chats.id`.<fk table='chats' column='id'/>
     */
    chatId: string;
  };
  users: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: character varying */
    firstName: string;
    /** Format: character varying */
    lastName: string;
    /** Format: timestamp with time zone */
    dateOfBirth: string;
    /**
     * Format: timestamp without time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    createdAt: string;
    /** Format: character varying */
    phoneNumber: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description chat_participants */
  "body.chat_participants": definitions["chat_participants"];
  /** Format: uuid */
  "rowFilter.chat_participants.id": string;
  /** Format: uuid */
  "rowFilter.chat_participants.chatId": string;
  /** Format: uuid */
  "rowFilter.chat_participants.userId": string;
  /** Format: timestamp without time zone */
  "rowFilter.chat_participants.createdAt": string;
  /** @description chats */
  "body.chats": definitions["chats"];
  /** Format: uuid */
  "rowFilter.chats.id": string;
  /** Format: character varying */
  "rowFilter.chats.name": string;
  /** Format: timestamp without time zone */
  "rowFilter.chats.createdAt": string;
  /** Format: boolean */
  "rowFilter.chats.isGroup": string;
  /** @description friends */
  "body.friends": definitions["friends"];
  /** Format: uuid */
  "rowFilter.friends.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.friends.created_at": string;
  /** Format: uuid */
  "rowFilter.friends.firstUser": string;
  /** Format: uuid */
  "rowFilter.friends.secondUser": string;
  /** @description messages */
  "body.messages": definitions["messages"];
  /** Format: uuid */
  "rowFilter.messages.id": string;
  /** Format: uuid */
  "rowFilter.messages.chatParticipantId": string;
  /** Format: json */
  "rowFilter.messages.content": string;
  /** Format: timestamp without time zone */
  "rowFilter.messages.createdAt": string;
  /** Format: uuid */
  "rowFilter.messages.chatId": string;
  /** @description users */
  "body.users": definitions["users"];
  /** Format: uuid */
  "rowFilter.users.id": string;
  /** Format: character varying */
  "rowFilter.users.firstName": string;
  /** Format: character varying */
  "rowFilter.users.lastName": string;
  /** Format: timestamp with time zone */
  "rowFilter.users.dateOfBirth": string;
  /** Format: timestamp without time zone */
  "rowFilter.users.createdAt": string;
  /** Format: character varying */
  "rowFilter.users.phoneNumber": string;
}

export interface operations {}

export interface external {}
